// <auto-generated />
using System;
using InventoryManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InventoryManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210911160025_AlterViewVW_CapitalProfitReport")]
    partial class AlterViewVW_CapitalProfitReport
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InventoryManagement.Data.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CostPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("InventoryManagement.Data.AccountDeposit", b =>
                {
                    b.Property<int>("AccountDepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("DepositAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("DepositDateUtc")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.HasKey("AccountDepositId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountDeposit");
                });

            modelBuilder.Entity("InventoryManagement.Data.AccountWithdraw", b =>
                {
                    b.Property<int>("AccountWithdrawId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal>("WithdrawAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("WithdrawDateUtc")
                        .HasColumnType("date");

                    b.HasKey("AccountWithdrawId");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountWithdraw");
                });

            modelBuilder.Entity("InventoryManagement.Data.AdminMoneyCollection", b =>
                {
                    b.Property<int>("AdminMoneyCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CollectionAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("AdminMoneyCollectionId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("AdminMoneyCollection");
                });

            modelBuilder.Entity("InventoryManagement.Data.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AccountTransactionCharge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("(0.00)");

                    b.Property<string>("CustomerAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<decimal>("Due")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(([TotalAmount]+[ReturnAmount]+[AccountTransactionCharge])-([TotalDiscount]+[Paid]+[PurchaseAdjustedAmount])) PERSISTED");

                    b.Property<decimal>("DueLimit")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("PurchaseAdjustedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("InventoryManagement.Data.CustomerPhone", b =>
                {
                    b.Property<int>("CustomerPhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsPrimary")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CustomerPhoneId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhone");
                });

            modelBuilder.Entity("InventoryManagement.Data.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("date");

                    b.Property<string>("ExpenseFor")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VoucherNo")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Expense");
                });

            modelBuilder.Entity("InventoryManagement.Data.ExpenseCategory", b =>
                {
                    b.Property<int>("ExpenseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("ExpenseCategoryId");

                    b.ToTable("ExpenseCategory");
                });

            modelBuilder.Entity("InventoryManagement.Data.ExpenseFixed", b =>
                {
                    b.Property<int>("ExpenseFixedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("CostPerDay")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("([Amount]/[IntervalDays]) PERSISTED");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("IntervalDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("ExpenseFixedId");

                    b.ToTable("ExpenseFixed");
                });

            modelBuilder.Entity("InventoryManagement.Data.ExpenseTransportation", b =>
                {
                    b.Property<int>("ExpenseTransportationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("date");

                    b.Property<string>("ExpenseNote")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalExpense")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("VoucherNo")
                        .HasColumnType("int");

                    b.HasKey("ExpenseTransportationId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("ExpenseTransportation");
                });

            modelBuilder.Entity("InventoryManagement.Data.ExpenseTransportationList", b =>
                {
                    b.Property<int>("ExpenseTransportationListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ExpenseFor")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("ExpenseTransportationId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPerson")
                        .HasColumnType("int");

                    b.Property<string>("Vehicle")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("ExpenseTransportationListId");

                    b.HasIndex("ExpenseTransportationId");

                    b.ToTable("ExpenseTransportationList");
                });

            modelBuilder.Entity("InventoryManagement.Data.Institution", b =>
                {
                    b.Property<int>("InstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<decimal>("Capital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("(0.00)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("DefaultAccountId")
                        .HasColumnType("int");

                    b.Property<string>("DialogTitle")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Established")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("InstitutionLogo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("LocalArea")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("VoucherCountdown")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("InstitutionId");

                    b.HasIndex("DefaultAccountId")
                        .IsUnique()
                        .HasFilter("[DefaultAccountId] IS NOT NULL");

                    b.ToTable("Institution");

                    b.HasData(
                        new
                        {
                            InstitutionId = 1,
                            Capital = 0m,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstitutionName = "Institution",
                            VoucherCountdown = 0
                        });
                });

            modelBuilder.Entity("InventoryManagement.Data.PageLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("LinkCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("LinkId");

                    b.HasIndex("LinkCategoryId");

                    b.ToTable("PageLink");
                });

            modelBuilder.Entity("InventoryManagement.Data.PageLinkAssign", b =>
                {
                    b.Property<int>("LinkAssignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LinkId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("LinkAssignId");

                    b.HasIndex("LinkId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PageLinkAssign");
                });

            modelBuilder.Entity("InventoryManagement.Data.PageLinkCategory", b =>
                {
                    b.Property<int>("LinkCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int?>("Sn")
                        .HasColumnName("SN")
                        .HasColumnType("int");

                    b.HasKey("LinkCategoryId");

                    b.ToTable("PageLinkCategory");
                });

            modelBuilder.Entity("InventoryManagement.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ProductCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<decimal>("SellingPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCatalogId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductCatalog", b =>
                {
                    b.Property<int>("ProductCatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogLevel")
                        .HasColumnType("int");

                    b.Property<string>("CatalogName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("CatalogTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ItemCount")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("ProductCatalogId");

                    b.HasIndex("CatalogTypeId");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCatalog");
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductCatalogType", b =>
                {
                    b.Property<int>("CatalogTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CatalogTypeId");

                    b.ToTable("ProductCatalogType");
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductDamaged", b =>
                {
                    b.Property<int>("ProductDamagedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DamagedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.HasKey("ProductDamagedId");

                    b.HasIndex("ProductStockId")
                        .IsUnique();

                    b.ToTable("ProductDamaged");
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductLog", b =>
                {
                    b.Property<int>("ProductLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityByRegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOnUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("LogStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int?>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("ProductLogId");

                    b.HasIndex("ActivityByRegistrationId");

                    b.HasIndex("ProductStockId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SellingId");

                    b.ToTable("ProductLog");
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductStock", b =>
                {
                    b.Property<int>("ProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseListId")
                        .HasColumnType("int");

                    b.Property<int?>("SellingListId")
                        .HasColumnType("int");

                    b.HasKey("ProductStockId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseListId");

                    b.HasIndex("SellingListId");

                    b.ToTable("ProductStock");
                });

            modelBuilder.Entity("InventoryManagement.Data.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MemoNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PurchaseDiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("PurchaseDiscountPercentage")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(case when [PurchaseTotalPrice]=(0) then (0) else ([PurchaseDiscountAmount]*(100))/[PurchaseTotalPrice] end) PERSISTED");

                    b.Property<decimal>("PurchaseDueAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("(([PurchaseTotalPrice]+[PurchaseReturnAmount])-([PurchaseDiscountAmount]+[PurchasePaidAmount])) PERSISTED");

                    b.Property<decimal>("PurchasePaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PurchasePaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(4)")
                        .HasComputedColumnSql("(case when (([PurchaseTotalPrice]+[PurchaseReturnAmount])-([PurchaseDiscountAmount]+[PurchasePaidAmount]))<=(0) then 'Paid' else 'Due' end) PERSISTED")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<decimal>("PurchaseReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PurchaseSn")
                        .HasColumnName("PurchaseSN")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchaseTotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VendorId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("InventoryManagement.Data.PurchaseList", b =>
                {
                    b.Property<int>("PurchaseListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("0");

                    b.Property<decimal>("SellingPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("PurchaseListId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseList");
                });

            modelBuilder.Entity("InventoryManagement.Data.PurchasePayment", b =>
                {
                    b.Property<int>("PurchasePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaidDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ReceiptSn")
                        .HasColumnName("ReceiptSN")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("PurchasePaymentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchasePayment");
                });

            modelBuilder.Entity("InventoryManagement.Data.PurchasePaymentList", b =>
                {
                    b.Property<int>("PurchasePaymentListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchasePaymentId")
                        .HasColumnType("int");

                    b.HasKey("PurchasePaymentListId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchasePaymentId");

                    b.ToTable("PurchasePaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Data.PurchasePaymentReturnRecord", b =>
                {
                    b.Property<int>("PurchasePaymentReturnRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal>("NetReturnAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("([CurrentReturnAmount]-[PrevReturnAmount]) PERSISTED");

                    b.Property<decimal>("PrevReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("PurchasePaymentReturnRecordId");

                    b.HasIndex("AccountId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("PurchasePaymentReturnRecord");
                });

            modelBuilder.Entity("InventoryManagement.Data.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DateofBirth")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("NationalId")
                        .HasColumnName("NationalID")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Ps")
                        .HasColumnName("PS")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("Validation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("RegistrationId");

                    b.ToTable("Registration");

                    b.HasData(
                        new
                        {
                            RegistrationId = 1,
                            Balance = 0m,
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            Ps = "Admin_121",
                            Type = "Admin",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("InventoryManagement.Data.Selling", b =>
                {
                    b.Property<int>("SellingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AccountTransactionCharge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("(0.00)");

                    b.Property<decimal>("BuyingTotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpenseTotal")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("GrandProfit")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("((([SellingTotalPrice]+[AccountTransactionCharge])-([BuyingTotalPrice]+[SellingDiscountAmount]+[SellingAccountCost]+[ExpenseTotal]))+([ServiceCharge]-[ServiceCost])) PERSISTED");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PromisedPaymentDate")
                        .HasColumnType("date");

                    b.Property<decimal>("PurchaseAdjustedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PurchaseDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingAccountCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("SellingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("SellingDiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("SellingDiscountPercentage")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("(case when [SellingTotalPrice]=(0.00) then (0.00) else ([SellingDiscountAmount]*(100.00))/[SellingTotalPrice] end) PERSISTED");

                    b.Property<decimal>("SellingDueAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("(([SellingTotalPrice]+[ServiceCharge]+[SellingReturnAmount]+[AccountTransactionCharge])-([SellingDiscountAmount]+[SellingPaidAmount]+[PurchaseAdjustedAmount])) PERSISTED");

                    b.Property<decimal>("SellingNetProfit")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("(([SellingTotalPrice]+[AccountTransactionCharge])-([BuyingTotalPrice]+[SellingAccountCost]+[ExpenseTotal])) PERSISTED");

                    b.Property<decimal>("SellingPaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("SellingPaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(4)")
                        .HasComputedColumnSql("(case when (([SellingTotalPrice]+[ServiceCharge]+[SellingReturnAmount]+[AccountTransactionCharge])-([SellingDiscountAmount]+[SellingPaidAmount]+[PurchaseAdjustedAmount]))<=(0.00) then 'Paid' else 'Due' end) PERSISTED")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<decimal>("SellingProfit")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("([SellingTotalPrice]-[BuyingTotalPrice]) PERSISTED");

                    b.Property<decimal>("SellingReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SellingSn")
                        .HasColumnName("SellingSN")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingTotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ServiceChargeDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<decimal>("ServiceCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ServiceProfit")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("([ServiceCharge]-[ServiceCost]) PERSISTED");

                    b.HasKey("SellingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PurchaseId")
                        .IsUnique()
                        .HasFilter("[PurchaseId] IS NOT NULL");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Selling");
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingAdjustment", b =>
                {
                    b.Property<int>("SellingAdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdjustmentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("SellingAdjustmentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductStockId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingAdjustment");
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingExpense", b =>
                {
                    b.Property<int>("SellingExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Expense")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ExpenseDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("SellingExpenseId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingExpense");
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingList", b =>
                {
                    b.Property<int>("SellingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Warranty")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("SellingListId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingList");
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingPayment", b =>
                {
                    b.Property<int>("SellingPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AccountCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([PaidAmount] * ([AccountCostPercentage]/100)) PERSISTED");

                    b.Property<decimal>("AccountCostPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("AccountTransactionCharge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("(0.00)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PaidDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ReceiptSn")
                        .HasColumnName("ReceiptSN")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("SellingPaymentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("SellingPayment");
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingPaymentList", b =>
                {
                    b.Property<int>("SellingPaymentListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AccountTransactionCharge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18, 2)")
                        .HasDefaultValueSql("(0.00)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SellingPaymentId")
                        .HasColumnType("int");

                    b.HasKey("SellingPaymentListId");

                    b.HasIndex("SellingId");

                    b.HasIndex("SellingPaymentId");

                    b.ToTable("SellingPaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingPaymentReturnRecord", b =>
                {
                    b.Property<int>("SellingPaymentReturnRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<decimal>("NetReturnAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18, 2)")
                        .HasComputedColumnSql("([CurrentReturnAmount]-[PrevReturnAmount]) PERSISTED");

                    b.Property<decimal>("PrevReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("SellingPaymentReturnRecordId");

                    b.HasIndex("AccountId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingPaymentReturnRecord");
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingPromiseDateMiss", b =>
                {
                    b.Property<int>("SellingPromiseDateMissId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime>("MissDate")
                        .HasColumnType("date");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.HasKey("SellingPromiseDateMissId");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("SellingId");

                    b.ToTable("SellingPromiseDateMiss");
                });

            modelBuilder.Entity("InventoryManagement.Data.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ServiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("ServiceDiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ServiceDiscountPercentage")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(case when [ServiceTotalPrice]=(0) then (0) else ([ServiceDiscountAmount]*(100))/[ServiceTotalPrice] end) PERSISTED");

                    b.Property<decimal>("ServiceDueAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("([ServiceTotalPrice]-([ServiceDiscountAmount]+[ServicePaidAmount])) PERSISTED");

                    b.Property<decimal>("ServicePaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ServicePaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(4)")
                        .HasComputedColumnSql("(case when ([ServiceTotalPrice]-([ServiceDiscountAmount]+[ServicePaidAmount]))<=(0) then 'Paid' else 'Due' end) PERSISTED")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<int>("ServiceSn")
                        .HasColumnName("ServiceSN")
                        .HasColumnType("int");

                    b.Property<decimal>("ServiceTotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ServiceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("InventoryManagement.Data.ServiceDevice", b =>
                {
                    b.Property<int>("ServiceDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductCatalogId")
                        .HasColumnType("int");

                    b.HasKey("ServiceDeviceId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductCatalogId");

                    b.ToTable("ServiceDevice");
                });

            modelBuilder.Entity("InventoryManagement.Data.ServiceList", b =>
                {
                    b.Property<int>("ServiceListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Problem")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<decimal>("ServiceCharge")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ServiceDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("ServiceListId");

                    b.HasIndex("ServiceDeviceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceList");
                });

            modelBuilder.Entity("InventoryManagement.Data.ServicePaymentList", b =>
                {
                    b.Property<int>("ServicePaymentListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SellingPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("ServicePaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ServicePaymentListId");

                    b.HasIndex("SellingPaymentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicePaymentList");
                });

            modelBuilder.Entity("InventoryManagement.Data.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<decimal>("Due")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(18,2)")
                        .HasComputedColumnSql("(([TotalAmount]+[ReturnAmount])-([TotalDiscount]+[Paid])) PERSISTED");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("ReturnAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("VendorAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("VendorCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("VendorPhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("VendorId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("InventoryManagement.Data.Warranty", b =>
                {
                    b.Property<int>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AcceptanceDate")
                        .HasColumnType("date");

                    b.Property<string>("AcceptanceDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int?>("ChangedProductCatalogId")
                        .HasColumnType("int");

                    b.Property<string>("ChangedProductCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ChangedProductName")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<string>("DeliveryDescription")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("InsertDateUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<int>("ProductStockId")
                        .HasColumnType("int");

                    b.Property<int>("SellingId")
                        .HasColumnType("int");

                    b.Property<int>("WarrantySn")
                        .HasColumnType("int");

                    b.HasKey("WarrantyId");

                    b.HasIndex("ChangedProductCatalogId");

                    b.HasIndex("ProductStockId");

                    b.HasIndex("SellingId");

                    b.ToTable("Warranty");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "5A71C6C4-9488-4BCC-A680-445A34C6E721",
                            ConcurrencyStamp = "5A71C6C4-9488-4BCC-A680-445A34C6E721",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "F73A5277-2535-48A4-A371-300508ADDD2F",
                            ConcurrencyStamp = "F73A5277-2535-48A4-A371-300508ADDD2F",
                            Name = "SubAdmin",
                            NormalizedName = "SUBADMIN"
                        },
                        new
                        {
                            Id = "95A97547-7B72-4E5C-855C-AA1F8CA327E8",
                            ConcurrencyStamp = "95A97547-7B72-4E5C-855C-AA1F8CA327E8",
                            Name = "SalesPerson",
                            NormalizedName = "SALESPERSON"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "A0456563-F978-4135-B563-97F23EA02FDA",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "A0456563-F978-4135-B563-97F23EA02FDA",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDch3arYEB9dCAudNdsYEpVX7ryywa8f3ZIJSVUmEThAI50pLh9RyEu7NjGJccpOog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "A0456563-F978-4135-B563-97F23EA02FDA",
                            RoleId = "5A71C6C4-9488-4BCC-A680-445A34C6E721"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InventoryManagement.Data.AccountDeposit", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithMany("AccountDeposit")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountDeposit_Account")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.AccountWithdraw", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithMany("AccountWithdraw")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountWithdraw_Account")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.AdminMoneyCollection", b =>
                {
                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("AdminMoneyCollection")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_AdminMoneyCollection_Registration")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.CustomerPhone", b =>
                {
                    b.HasOne("InventoryManagement.Data.Customer", "Customer")
                        .WithMany("CustomerPhone")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_CustomerPhone_Customer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.Expense", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithMany("Expense")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Expense_Account")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Data.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expense")
                        .HasForeignKey("ExpenseCategoryId")
                        .HasConstraintName("FK_Expense_ExpenseCategory")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("Expense")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Expense_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.ExpenseTransportation", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithMany("ExpenseTransportation")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_ExpenseTransportation_Account")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Data.Customer", "Customer")
                        .WithMany("ExpenseTransportation")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("ExpenseTransportation")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.ExpenseTransportationList", b =>
                {
                    b.HasOne("InventoryManagement.Data.ExpenseTransportation", "ExpenseTransportation")
                        .WithMany("ExpenseTransportationList")
                        .HasForeignKey("ExpenseTransportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.Institution", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithOne("Institution")
                        .HasForeignKey("InventoryManagement.Data.Institution", "DefaultAccountId");
                });

            modelBuilder.Entity("InventoryManagement.Data.PageLink", b =>
                {
                    b.HasOne("InventoryManagement.Data.PageLinkCategory", "LinkCategory")
                        .WithMany("PageLink")
                        .HasForeignKey("LinkCategoryId")
                        .HasConstraintName("FK_PageLink_PageLinkCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.PageLinkAssign", b =>
                {
                    b.HasOne("InventoryManagement.Data.PageLink", "Link")
                        .WithMany("PageLinkAssign")
                        .HasForeignKey("LinkId")
                        .HasConstraintName("FK_PageLinkAssign_PageLink")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("PageLinkAssign")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_PageLinkAssign_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.Product", b =>
                {
                    b.HasOne("InventoryManagement.Data.ProductCatalog", "ProductCatalog")
                        .WithMany("Product")
                        .HasForeignKey("ProductCatalogId")
                        .HasConstraintName("FK_Product_ProductCatalog")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductCatalog", b =>
                {
                    b.HasOne("InventoryManagement.Data.ProductCatalogType", "CatalogType")
                        .WithMany("ProductCatalog")
                        .HasForeignKey("CatalogTypeId")
                        .HasConstraintName("FK_ProductCatalog_ProductCatalogType");

                    b.HasOne("InventoryManagement.Data.ProductCatalog", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_ProductCatalog_ProductCatalog");
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductDamaged", b =>
                {
                    b.HasOne("InventoryManagement.Data.ProductStock", "ProductStock")
                        .WithOne("ProductDamaged")
                        .HasForeignKey("InventoryManagement.Data.ProductDamaged", "ProductStockId")
                        .HasConstraintName("FK_ProductDamaged_ProductStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductLog", b =>
                {
                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("ProductLog")
                        .HasForeignKey("ActivityByRegistrationId")
                        .HasConstraintName("FK_ProductLog_Registration")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.ProductStock", "ProductStock")
                        .WithMany("ProductLog")
                        .HasForeignKey("ProductStockId")
                        .HasConstraintName("FK_ProductLog_ProductStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Purchase", "Purchase")
                        .WithMany("ProductLog")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_ProductLog_Purchase")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryManagement.Data.Selling", "Selling")
                        .WithMany("ProductLog")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_ProductLog_Selling")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("InventoryManagement.Data.ProductStock", b =>
                {
                    b.HasOne("InventoryManagement.Data.Product", "Product")
                        .WithMany("ProductStock")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductStock_Product")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.PurchaseList", "PurchaseList")
                        .WithMany("ProductStock")
                        .HasForeignKey("PurchaseListId")
                        .HasConstraintName("FK_ProductStock_PurchaseList")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.SellingList", "SellingList")
                        .WithMany("ProductStock")
                        .HasForeignKey("SellingListId")
                        .HasConstraintName("FK_ProductStock_SellingList")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("InventoryManagement.Data.Purchase", b =>
                {
                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("Purchase")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Purchase_Registration")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Vendor", "Vendor")
                        .WithMany("Purchase")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Purchase_Vendor")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.PurchaseList", b =>
                {
                    b.HasOne("InventoryManagement.Data.Product", "Product")
                        .WithMany("PurchaseList")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_PurchaseList_Product")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Purchase", "Purchase")
                        .WithMany("PurchaseList")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_PurchaseList_Purchase")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.PurchasePayment", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithMany("PurchasePayment")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_PurchasePayment_Account")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("PurchasePayment")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_PurchasePayment_Registration")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Vendor", "Vendor")
                        .WithMany("PurchasePayment")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_PurchasePayment_Vendor")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.PurchasePaymentList", b =>
                {
                    b.HasOne("InventoryManagement.Data.Purchase", "Purchase")
                        .WithMany("PurchasePaymentList")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_PurchasePaymentList_Purchase")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.PurchasePayment", "PurchasePayment")
                        .WithMany("PurchasePaymentList")
                        .HasForeignKey("PurchasePaymentId")
                        .HasConstraintName("FK_PurchasePaymentList_PurchasePayment")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.PurchasePaymentReturnRecord", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithMany("PurchasePaymentReturnRecord")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_PurchasePaymentReturnRecord_Account")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Data.Purchase", "Purchase")
                        .WithMany("PurchasePaymentReturnRecord")
                        .HasForeignKey("PurchaseId")
                        .HasConstraintName("FK_PurchasePaymentReturnRecord_Purchase")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("PurchasePaymentReturnRecord")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_PurchasePaymentReturnRecord_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.Selling", b =>
                {
                    b.HasOne("InventoryManagement.Data.Customer", "Customer")
                        .WithMany("Selling")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Selling_Customer")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Purchase", "Purchase")
                        .WithOne("Selling")
                        .HasForeignKey("InventoryManagement.Data.Selling", "PurchaseId")
                        .HasConstraintName("FK_Selling_Purchase")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("Selling")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Selling_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingAdjustment", b =>
                {
                    b.HasOne("InventoryManagement.Data.Product", "Product")
                        .WithMany("SellingAdjustment")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_SellingAdjustment_Product")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.ProductStock", "ProductStock")
                        .WithMany("SellingAdjustment")
                        .HasForeignKey("ProductStockId")
                        .HasConstraintName("FK_SellingAdjustment_ProductStock")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("SellingAdjustment")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_SellingAdjustment_Registration")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Selling", "Selling")
                        .WithMany("SellingAdjustment")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_SellingAdjustment_Selling")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingExpense", b =>
                {
                    b.HasOne("InventoryManagement.Data.Selling", "Selling")
                        .WithMany("SellingExpense")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_SellingExpense_Selling")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingList", b =>
                {
                    b.HasOne("InventoryManagement.Data.Product", "Product")
                        .WithMany("SellingList")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Selling", "Selling")
                        .WithMany("SellingList")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_SellingList_Selling")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingPayment", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithMany("SellingPayment")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_SellingPayment_Account")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Data.Customer", "Customer")
                        .WithMany("SellingPayment")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_SellingPayment_Customer")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("SellingPayment")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_SellingPayment_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingPaymentList", b =>
                {
                    b.HasOne("InventoryManagement.Data.Selling", "Selling")
                        .WithMany("SellingPaymentList")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_SellingPaymentList_Selling")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.SellingPayment", "SellingPayment")
                        .WithMany("SellingPaymentList")
                        .HasForeignKey("SellingPaymentId")
                        .HasConstraintName("FK_SellingPaymentList_SellingPayment")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingPaymentReturnRecord", b =>
                {
                    b.HasOne("InventoryManagement.Data.Account", "Account")
                        .WithMany("SellingPaymentReturnRecord")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_SellingPaymentReturnRecord_Account")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("SellingPaymentReturnRecord")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_SellingPaymentReturnRecord_Registration")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Selling", "Selling")
                        .WithMany("SellingPaymentReturnRecord")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_SellingPaymentReturnRecord_Selling")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.SellingPromiseDateMiss", b =>
                {
                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("SellingPromiseDateMisses")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_SellingPromiseDateMiss_Registration")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Selling", "Selling")
                        .WithMany("SellingPromiseDateMisses")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_SellingPromiseDateMiss_Selling")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.Service", b =>
                {
                    b.HasOne("InventoryManagement.Data.Customer", "Customer")
                        .WithMany("Service")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Service_Customer")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Registration", "Registration")
                        .WithMany("Service")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_Service_Registration")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.ServiceDevice", b =>
                {
                    b.HasOne("InventoryManagement.Data.Customer", "Customer")
                        .WithMany("ServiceDevice")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ServiceDevice_Customer")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.ProductCatalog", "ProductCatalog")
                        .WithMany("ServiceDevice")
                        .HasForeignKey("ProductCatalogId")
                        .HasConstraintName("FK_ServiceDevice_ProductCatalog")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.ServiceList", b =>
                {
                    b.HasOne("InventoryManagement.Data.ServiceDevice", "ServiceDevice")
                        .WithMany("ServiceList")
                        .HasForeignKey("ServiceDeviceId")
                        .HasConstraintName("FK_ServiceList_ServiceDevice")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Service", "Service")
                        .WithMany("ServiceList")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ServiceList_Service")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.ServicePaymentList", b =>
                {
                    b.HasOne("InventoryManagement.Data.SellingPayment", "SellingPayment")
                        .WithMany("ServicePaymentList")
                        .HasForeignKey("SellingPaymentId")
                        .HasConstraintName("FK_ServicePaymentList_SellingPayment")
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Service", "Service")
                        .WithMany("ServicePaymentList")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ServicePaymentList_Service")
                        .IsRequired();
                });

            modelBuilder.Entity("InventoryManagement.Data.Warranty", b =>
                {
                    b.HasOne("InventoryManagement.Data.ProductCatalog", "ProductCatalog")
                        .WithMany("Warranty")
                        .HasForeignKey("ChangedProductCatalogId")
                        .HasConstraintName("FK_Warranty_ProductCatalog")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("InventoryManagement.Data.ProductStock", "ProductStock")
                        .WithMany("Warranty")
                        .HasForeignKey("ProductStockId")
                        .HasConstraintName("FK_Warranty_ProductStock")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("InventoryManagement.Data.Selling", "Selling")
                        .WithMany("Warranty")
                        .HasForeignKey("SellingId")
                        .HasConstraintName("FK_Warranty_Selling")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
