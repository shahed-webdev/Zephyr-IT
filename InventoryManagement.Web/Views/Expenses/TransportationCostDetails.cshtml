@using InventoryManagement.Repository
@model ExpenseTransportationDetailsModel
@{
    ViewData["Title"] = "Transportation Cost Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles{
    <style>
        .delete { cursor: pointer; color: red; }
        #grandTotal { font-size: 22px; text-align: right; font-weight: bold; }
    </style>
}

<div class="container">
    <div class="mb-3">
        <h4 class="page-header">Transportation Cost Details</h4>
        <em>Expense By: @Model.CreateBy</em>
    </div>

    <div class="card card-body">
        <div class="form-row">
            <div class="col-lg-4">
                <div class="form-group">
                    <label>Target Client/Corporate</label>
                    <input id="inputCustomer" type="text" class="form-control" value="@Model.CustomerName" placeholder="Internal" />
                    <input id="hiddenCustomerId" type="hidden" value="@Model.CustomerId" />
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    <label>Expanse Date</label>
                    <input id="expenseDate" type="text" class="form-control datepicker" value="@Model.ExpenseDate.ToString("d MMMM, yyyy")" required />
                </div>
            </div>
            <div class="col-lg-5">
                <div class="form-group">
                    <label>Note</label>
                    <input id="expenseNote" value="@Model.ExpenseNote" type="text" class="form-control" />
                </div>
            </div>
        </div>

        <form id="formAdd">
            <div class="form-row mt-3">
                <div class="col-lg-4">
                    <div class="form-group">
                        <label>Details</label>
                        <input name="ExpenseFor" type="text" class="form-control" required />
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        <label>Person</label>
                        <input name="NumberOfPerson" type="number" class="form-control" required />
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>Vehicle</label>
                        <input name="Vehicle" type="text" class="form-control" required />
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        <label>Tk</label>
                        <div class="input-group align-items-center">
                            <input name="ExpenseAmount" step="0.01" type="number" class="form-control" required />
                            <div class="input-group-append">
                                <button type="submit" class="btn btn-warning btn-md my-0">Add</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>

        <table class="table table-sm">
            <thead>
                <tr>
                    <th><strong>Details</strong></th>
                    <th><strong>Person</strong></th>
                    <th><strong>Vehicle</strong></th>
                    <th><strong>Tk</strong></th>
                    <th><strong>Delete</strong></th>
                </tr>
            </thead>
            <tbody id="tbody"></tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <div>
            @if (!Model.IsApproved)
            {
                <button id="btnDelete" type="button" class="btn btn-danger mb-1 m-0">Delete</button>
            }
            <a class="d-block" href="/Expenses/Index">Back To List</a>
        </div>

        <div class="d-flex flex-column flex-end">
            <strong id="grandTotal"></strong>
            <select id="selectAccountId" name="@Model.AccountId" asp-items="ViewBag.Account" class="form-control my-2">
                <option value="">[ Payment Method ]</option>
            </select>
            <button id="btnSubmit" class="btn peach-gradient mb-1 m-0">Update <i class="fas fa-check ml-1"></i></button>

            <div class="mt-2 text-right">
                <input type="checkbox" class="form-check-input" id="checkApprove" @(Model.IsApproved ? "disabled" : "")>
                <label class="form-check-label" for="checkApprove">@(Model.IsApproved ? "Approved" : "Approve Expense")</label>
            </div>
        </div>   
    </div>
</div>

@section Scripts{
    <script>
        $(function() {
            $('.datepicker').pickadate({ clear: '' });

            //customer autocomplete
            hiddenCustomerId.value = "";
            inputCustomer.addEventListener("input", function() {
                hiddenCustomerId.value = "";
            });

            $('#inputCustomer').typeahead({
                minLength: 1,
                displayText: function(item) {
                    return `${item.CustomerName}  ${item.PhonePrimary ? item.PhonePrimary : ''}  ${item.OrganizationName ? item.OrganizationName : ''}`;
                },
                afterSelect: function(item) {
                    this.$element[0].value = item.CustomerName;
                },
                source: function(request, result) {
                    $.ajax({
                        url: "/Selling/FindCustomers",
                        data: { prefix: request },
                        success: function(response) { result(response); },
                        error: function(err) { console.log(err) }
                    });
                },
                updater: function(item) {
                    hiddenCustomerId.value = item.CustomerId;
                    return item;
                }
            })
        });

        //private method
        (function() {
            let listedData = @Html.Raw(Json.Serialize(Model.ExpenseTransportationList));

            const serializeForm = function(form) {
                const obj = {};
                obj.ExpenseTransportationListId = new Date().getTime();

                const formData = new FormData(form);
                for (let key of formData.keys()) {
                    obj[key] = formData.get(key);
                }
                return obj;
            };

            const selectAccountId = document.getElementById("selectAccountId");
            const btnSubmit = document.getElementById("btnSubmit");
            const checkApprove = document.getElementById("checkApprove");
            const formAdd = document.getElementById("formAdd");
            const tBody = document.getElementById("tbody");

            //add to list
            formAdd.addEventListener("submit", function(evt) {
                evt.preventDefault();

                listedData.push(serializeForm(this));

                showTable();
                this.reset();
            });

            function showTable() {
                const fragment = document.createDocumentFragment();
                const grandTotal = document.getElementById("grandTotal");

                listedData.forEach(item => {
                    const tr = document.createElement("tr");
                    tr.innerHTML = `<td>${item.ExpenseFor}</td><td>${item.NumberOfPerson}</td><td>${item.Vehicle}</td><td>৳${item.ExpenseAmount}</td><td><i id="${item.ExpenseTransportationListId}" class="delete fas fa-trash"></i></td>`;
                    fragment.appendChild(tr);
                });

                tBody.innerHTML = "";
                tBody.append(fragment);

                grandTotal.textContent = `Total: ৳${sumTotal()}`;
            }

            //delete
            tBody.addEventListener("click", function(evt) {
                const onDelete = evt.target.classList.contains("delete");
                if (!onDelete) return;

                const id = +evt.target.id;
                evt.target.parentElement.parentElement.remove();

                listedData = listedData.filter(el => el.ExpenseTransportationListId !== id);

                showTable();
            });

            //post data
            btnSubmit.addEventListener("click", function(evt) {
                evt.preventDefault();

                //Payment Method validation if admin
                if (selectAccountId) {
                    const selected = selectAccountId.value;
                    if (!selected) {
                        $.notify("Select Payment Method", "error");
                        return;
                    }
                }

                const customerId = document.getElementById("hiddenCustomerId");
                const expenseDate = document.getElementById("expenseDate");
                const expenseNote = document.getElementById("expenseNote");

                if (!customerId.value)
                    inputCustomer.value = "";

                const model = {
                    ExpenseTransportationId: @Model.ExpenseTransportationId,
                    CustomerId: customerId.value,
                    ExpenseDate: expenseDate.value,
                    ExpenseNote: expenseNote.value,
                    TotalExpense: sumTotal(),
                    AccountId: selectAccountId.value,
                    ExpenseTransportationList: listedData
                }


                if (!model.ExpenseDate || !model.ExpenseNote || !listedData.length) {
                    $.notify("Required Info Not Provided", "error");
                    return;
                }

                disableSubmit(true, this);

                $.ajax({
                    type: "POST",
                    url: `/Expenses/UpdateTransportationCost`,
                    data: model,
                    success: response => {
                        disableSubmit(false, this);
                        $.notify(response.Message, response.IsSuccess ? "success" : "error");
                    },
                    error: response => {
                        disableSubmit(false, this);
                        console.log(response);
                    }
                });
            });

            function sumTotal() {
                return listedData.reduce((acc, item) => acc + +item.ExpenseAmount, 0).toFixed(2);
            }

            function disableSubmit(isSubmit, btn) {
                btn.disabled = isSubmit;
            }

            //approve check
            checkApprove.addEventListener("click", function() {
                //Payment Method validation if admin
                if (selectAccountId) {
                    const selected = selectAccountId.value;
                    if (!selected) {
                        $.notify("Select Payment Method", "error");

                        this.checked =false
                        return;
                    }
                }
              

                this.disabled = true;

                $.ajax({
                    type: "POST",
                    url: `/Expenses/ApproveTransportationCost`,
                    data: { id: @Model.ExpenseTransportationId, accountId: selectAccountId.value},
                    success: response => {
                        this.disabled = response.IsSuccess;
                        $.notify(response.Message, response.IsSuccess ? "success" : "error");
                        location.href = "/Expenses/Index";
                    },
                    error: response => {
                        this.disabled = false;
                        console.log(response);
                    }
                });
            });

            //delete
            const btnDelete = document.getElementById("btnDelete");
            if (btnDelete) {
                btnDelete.onclick = function(evt) {
                    this.disabled = true;
                    $.ajax({
                        type: "POST",
                        url: `/Expenses/DeleteTransportationCost`,
                        data: { id: @Model.ExpenseTransportationId},
                        success: response => {
                            $.notify(response.Message, response.IsSuccess ? "success" : "error");

                            if (response.IsSuccess) {
                                location.href = "/Expenses/Index";
                                return;
                            }
                            this.disabled = false;
                        },
                        error: response => {
                            this.disabled = false;
                            console.log(response);
                        }
                    });
                }
            }

            //bind inserted data
            showTable();
        }());
    </script>
}

