@using InventoryManagement.Repository
@model IEnumerable<ExpenseAllViewModel>
@{
    ViewData["Title"] = "Expense Category Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";

    var category = Model.FirstOrDefault()?.ExpenseCategory;
    var from = Context.Request.Query["from"];
    var to = Context.Request.Query["to"];
    var separator = !string.IsNullOrEmpty(to) && !string.IsNullOrEmpty(from) ? " - " : "";
}

<div class="m-md-3">
    <div class="card card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div>
                <h4 class="page-header">
                    Expense Details: <small>@category</small>
                </h4>
                <em>@from @separator @to</em>
            </div>
            <div class="text-right">
                <h5 id="totalAmount" class="mb-0 font-weight-bold">
                    Total: ৳@Model.Sum(t => t.ExpenseAmount)
                </h5>
                <a href="/Expenses/ExpenseReport" class="d-print-none"><i class="fas fa-long-arrow-alt-left mr-1"></i>Back to Previous</a>
            </div>
        </div>

            <table id="data-table" class="table table-sm table-bordered">
                <thead>
                    <tr>
                        <th>Voucher No</th>
                        <th>Amount</th>
                        <th class="text-left">Expense&nbsp;For</th>
                        <th>Expense&nbsp;Date</th>
                        <th>Posted By</th>
                    </tr>
                </thead>
            </table>
    </div>
</div>


@section Scripts {
    <script>
        $(function () {
            dataTable.filter = [];
            dataTable.filter.push({ Field: "IsApproved", Value: true, Operand: dataTable.operand.Equal });
            dataTable.filter.push({ Field: "ExpenseCategory", Value: "@category", Operand: dataTable.operand.Equal });
            @if (from != "")
            {
                @:dataTable.filter.push({ Field: "ExpenseDate", Value: "@from", Operand: dataTable.operand.GreaterThanOrEqual });
            }

            @if (to != "")
            {
                @:dataTable.filter.push({ Field: "ExpenseDate", Value: "@to", Operand: dataTable.operand.LessThanOrEqual });
            }

            dataTable.getData();
        });

        const dataTable = {
            table: null,
            filter: null,
            init: function() {
                dataTable.table = $("#data-table").DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                        url: "/Expenses/GetExpense",
                        type: "POST",
                        data: function (d) {
                            d.filters = dataTable.filter;
                        }
                    },
                    columns:
                    [
                        {
                            data: "VoucherNo",
                            "render": function(data, type, row, meta) {
                                return row.IsTransportation ? `<a class="blue-text" href="/Expenses/TransportationCostDetails/${row.Id}">${data}</a>` : data;
                            }
                        },
                        {
                            data: "ExpenseAmount",
                            "render": function(data) {
                                return `${data}/-`
                            }
                        },
                        { data: "ExpenseFor" },
                        { data: "ExpenseDate", "render": function(data) { return moment(data).format('DD MMM YYYY') } },
                        { data: "CreateBy" }
                    ],
                    columnDefs: [
//                        { 'searchable': false, 'targets': [6] },
//                        { 'sortable': false, 'targets': [6] },
                        { 'className': "text-left", "targets": [2] },
                        { 'className': "text-right", "targets": [1] }
                    ],
                    order: [[0, 'asc']]
                });
            },
            getData: function() {
                dataTable.table ? dataTable.table.ajax.reload() : dataTable.init();
            },
            operand: {
                Equal: 0,
                NotEqual: 1,
                GreaterThan: 2,
                LessThan: 3,
                GreaterThanOrEqual: 4,
                LessThanOrEqual: 5,
                Contains: 6,
                StartsWith: 7,
                EndsWith: 8
            }
        }
    </script>
}
