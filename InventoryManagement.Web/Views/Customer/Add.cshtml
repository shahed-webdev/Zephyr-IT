@using InventoryManagement.Repository
@model CustomerAddUpdateViewModel


@{
    ViewData["Title"] = "Add New Customer";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@section Styles{ 
<style>
    .phone-container { display: flex; margin: 1.5rem 0; align-items: center; }
    .phone-container .add-element { margin-left: -23px; padding-bottom: 15px; }
    .phone-container .btn-floating.btn-sm { width: 22px; height: 22px; }
    .phone-container .btn-floating.btn-sm i { font-size: .70rem; line-height: 2px; pointer-events: none }
</style>
}

<div class="container mt-3">
    <div class="row">
        <div class="col-md-8 col-lg-10 mx-auto">
            <div class="card card-body p-5">
                <h4 class="page-header mt-3 text-center">Add New Customer</h4>

                <form asp-action="Add">
                    <div class="md-form mb-5">
                        <input asp-for="CustomerName" class="form-control" />
                        <label asp-for="CustomerName">Name</label>
                        <span asp-validation-for="CustomerName"></span>
                    </div>
                    <div id="phone-wrapper">
                        <div class="phone-container">
                            <div class="md-form m-0 flex-grow-1">
                                <input id="phone-0" name="PhoneNumbers[0].Phone" required type="number" class="form-control" />
                                <label for="phone-0">Phone Number (Primary)</label>
                                <input type="hidden" value="true" name="PhoneNumbers[0].IsPrimary">
                            </div>
                            <div class="add-element">
                                <a class="btn-floating btn-sm bg-success add m-0"><i class="fas fa-plus"></i></a>
                            </div>
                        </div>
                    </div>
                    <div class="md-form mb-5">
                        <input asp-for="OrganizationName" class="form-control" />
                        <label asp-for="OrganizationName">Organization Name</label>
                    </div>
                    <div class="md-form mb-5">
                        <input asp-for="CustomerAddress" class="form-control" />
                        <label asp-for="CustomerAddress">Address</label>
                    </div>
                    <div class="md-form mb-5">
                        <input id="Description" type="text" class="form-control" />
                        <label for="Description">Description</label>
                    </div>
                    <div class="md-form mb-5">
                        <input id="DueLimit" type="text" class="form-control" />
                        <label for="DueLimit">Due Limit</label>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center">
                        <button class="btn peach-gradient btn-rounded my-4 waves-effect z-depth-0" type="submit">Add Customer</button>
                        <a asp-action="List">Back to List</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>    

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

<script>
    //selectors
    const phoneContainer = document.getElementById("phone-wrapper");

    //functions
    const createElementName = function(modelName, index) {
        return `${modelName}[${index}].Phone`;
    }

    let elementIndex = 1;
    const addInputelement = function () {
        const element = `<div class="phone-container">
            <div class="md-form m-0 flex-grow-1">
                <input id="phone-${elementIndex}" name="PhoneNumbers[${elementIndex}].Phone" required type="number" class="form-control" />
                <label for="phone-${elementIndex}">Phone Number</label>
            </div>
            <div class="add-element">
                <a class="btn-floating btn-sm bg-danger remove m-0"><i class="fas fa-minus"></i></a>
            </div>
        </div>`;

        elementIndex++;
        phoneContainer.insertAdjacentHTML('beforeend', element);
    }

    const removeInputelement = function (evt) {
        evt.target.parentElement.parentElement.remove();
    }


    const togglePhoneElement = function (evt) {
        const addClicked = evt.target.classList.contains("add");
        const removeClicked = evt.target.classList.contains("remove");

        if (addClicked)
            addInputelement(evt);

        if (removeClicked)
            removeInputelement(evt);
    }


   //events
    phoneContainer.addEventListener("click", togglePhoneElement);   
</script>
}

