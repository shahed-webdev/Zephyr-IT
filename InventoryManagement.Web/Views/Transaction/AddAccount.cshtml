@model IEnumerable<InventoryManagement.Repository.AccountCrudModel>
@{
    ViewData["Title"] = "Add Account";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles{
    <style>
        .table tr td i { cursor: pointer }
        .table tr td i.delete { color: red }
    </style>
}

<div class="m-md-3">
    <h4 class="page-header mb-3">Account</h4>

    <div class="mb-3">
        <form id="formDefaultAccount">
            <div class="row">
                <div class="col-4">
                    <select name="AccountId" asp-items="ViewBag.Account" class="form-control" required>
                        <option value="">[ Account ]</option>
                    </select>
                </div>
                <div class="col">
                    <input class="btn btn-md btn-deep-orange m-0" type="submit" value="Change Default Account" />
                </div>
            </div>

        </form>
    </div>

    <div class="card card-body">
        <form id="formAdd">
            <div class="row">
                <div class="col-lg-5">
                    <div class="md-form">
                        <label for="inputAccountName">Account Name</label>
                        <input id="inputAccountName" type="text" name="AccountName" class="form-control" required>
                    </div>
                </div>
                <div class="col-lg-5">
                    <div class="md-form">
                        <label for="inputCostPercentage">Cost Percentage</label>
                        <input id="inputCostPercentage" type="number" step="0.01" min="0" max="100" name="CostPercentage" class="form-control" required>
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="md-form">
                        <input id="btnSubmit" type="submit" value="Add" class="btn btn-deep-orange btn-md" />
                    </div>
                </div>
            </div>
        </form>

        <table class="table">
            <thead>
                <tr>
                    <th><strong>Account Name</strong></th>
                    <th><strong>Cost Percentage</strong></th>
                    <th><strong>Balance</strong></th>
                    <th class="text-center"><strong>Edit</strong></th>
                    <th class="text-center"><strong>Delete</strong></th>
                    <th class="text-center"><strong>Deposit</strong></th>
                    <th class="text-center"><strong>Withdraw</strong></th>
                </tr>
            </thead>
            <tbody id="tBody">
                @foreach (var item in Model)
                {
                    var isDefaultAccount = item.AccountId == ViewBag.DefaultAccountId;
                    var balance = item.Balance;

                    <tr>
                        <td>
                            @item.AccountName
                            @if (isDefaultAccount)
                            {
                                <i class="fas fa-check-circle text-success"></i>
                            }
                        </td>
                        <td>@item.CostPercentage%</td>
                        <td>
                            <span class="@(balance < 0? "red-text":"")">৳@balance</span>

                            @if (!isDefaultAccount && balance > 0)
                            {
                                <i id="@item.AccountId" data-name="@item.AccountName" data-balance="@balance" class="transfer blue-text d-block">
                                    Transfer to Default
                                </i>
                            }
                        </td>
                        <td class="text-center"><i id="@item.AccountId" data-name="@item.AccountName" data-percentage="@item.CostPercentage" class="edit fas fa-edit"></i></td>
                        <td class="text-center"><i id="@item.AccountId" class="delete fas fa-trash"></i></td>
                        <td class="text-center">
                            <a class="text-success" href="/Transaction/Deposit/@item.AccountId">
                                <i class="fas fa-long-arrow-alt-down mr-1"></i>Deposit
                            </a>
                        </td>
                        <td class="text-center">
                            <a class="text-danger" href="/Transaction/Withdrawal/@item.AccountId">
                                <i class="fas fa-long-arrow-alt-up mr-1"></i>Withdraw
                            </a>
                        </td>
                    </tr>
                }
            </tbody> 
        </table>
    </div>
</div>



<!-- Modal transfer to default account  -->
<div class="modal fade" id="transferAmountModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-notify" role="document">
        <div class="modal-content">
            <div class="modal-header deep-orange darken-1">
                <strong class="heading lead">Transfer To Default Account</strong>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="white-text">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <form id="formTransferAmount">
                    <input type="hidden" name="AccountId">
                    <h5>Transfer From: <strong id="transferFrom"></strong></h5>
                    
                    <div class="form-group">
                        <label>Transfer Amount</label>
                        <input type="number" step="0.01" min="0" name="amount" class="form-control" required>
                    </div>

                    <input id="btnTransfer" type="submit" class="btn btn-deep-orange" value="Transfer" />
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal update  -->
<div class="modal fade" id="updateModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-notify" role="document">
        <div class="modal-content">
            <div class="modal-header deep-orange darken-1">
                <strong class="heading lead">Update</strong>

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="white-text">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <form id="formUpdate">
                    <input type="hidden" name="AccountId">
                    <div class="form-group">
                        <label>Account Name</label>
                        <input type="text" name="AccountName" class="form-control" required />
                    </div>
                    <div class="form-group">
                        <label>Cost Percentage</label>
                        <input type="number" step="0.01" min="0" max="100" name="CostPercentage" class="form-control" required>
                    </div>

                    <input id="btnUpdate" type="submit" class="btn btn-deep-orange" value="Update" />
                </form>
            </div>
        </div>
    </div>
</div>


@section Scripts{
    <script>
        (function() {
            const serializeForm = function(form) {
                const obj = {};
                const formData = new FormData(form);
                for (let key of formData.keys()) {
                    obj[key] = formData.get(key);
                }
                return obj;
            };

            //submit add account form
            const formAdd = document.getElementById("formAdd");
            formAdd.addEventListener("submit",
                function(evt) {
                    evt.preventDefault();

                    disableBtn(this.btnSubmit, true);

                    const body = serializeForm(this);
                    $.ajax({
                        url: '/Transaction/AddAccount',
                        type: "POST",
                        data: body,
                        success: response => {
                            $("#formAdd").notify(response.Message, response.IsSuccess ? "success" : "error");
                            disableBtn(this.btnSubmit, false);

                            if (response.IsSuccess)
                                location.reload();
                        },
                        error: error => {
                            console.log(error);
                            disableBtn(this.btnSubmit, false);
                        }
                    });
                });

            //account edit/delete/transfer
            const formTransferAmount = document.getElementById("formTransferAmount");
            const transferFromLabel = document.getElementById("transferFrom");
            const modalTransfer = $("#transferAmountModal");

            const modalContainer = $("#updateModal");
            const formUpdate = document.getElementById("formUpdate");
            const tBody = document.getElementById("tBody");

            tBody.addEventListener("click",
                function(evt) {
                    const element = evt.target;

                    const onTransfer = element.classList.contains("transfer");
                    const onEdit = element.classList.contains("edit");
                    const onDelete = element.classList.contains("delete");

                    const id = element.id;
                    const name = element.getAttribute("data-name");

                    //transfer
                    if (onTransfer) {
                        const balance = element.getAttribute("data-balance");
                        transferFromLabel.textContent = `${name}: ${balance}/-`;

                        formTransferAmount.AccountId.value = id;
                        formTransferAmount.amount.max = balance;
                        modalTransfer.modal("show");
                    }

                    //edit
                    if (onEdit) {
                        const percentage = element.getAttribute("data-percentage");

                        formUpdate.AccountId.value = id;
                        formUpdate.AccountName.value = name;
                        formUpdate.CostPercentage.value = percentage;

                        modalContainer.modal("show");
                    }

                    if (onDelete) {
                        $.ajax({
                            url: '/Transaction/DeleteAccount',
                            type: "POST",
                            data: { id },
                            success: response => {
                                $.notify(response.Message, response.IsSuccess ? "success" : "error");

                                if (response.IsSuccess) {
                                    element.parentElement.parentElement.remove();
                                }

                            },
                            error: error => {
                                console.log(error);
                            }
                        });
                    }
                })

            //account update post
            formUpdate.addEventListener("submit",
                function(evt) {
                    evt.preventDefault();

                    disableBtn(this.btnUpdate, true);

                    const body = serializeForm(this);
                    $.ajax({
                        url: '/Transaction/UpdateAccount',
                        type: "POST",
                        data: body,
                        success: response => {
                            $.notify(response.Message, response.IsSuccess ? "success" : "error");
                            disableBtn(this.btnUpdate, false);

                            if (response.IsSuccess)
                                modalContainer.modal("hide");
                        },
                        error: error => {
                            console.log(error);
                            disableBtn(this.btnUpdate, false);
                        }
                    });
                });

            //disable btn on submitting
            function disableBtn(btn, isDisable) {
                btn.disabled = isDisable;
            }


            //set default account
            const formDefaultAccount = document.getElementById("formDefaultAccount");
            formDefaultAccount.addEventListener("submit",
                function(evt) {
                    evt.preventDefault();

                    const accountId = this.AccountId.value;
                    if (!accountId) return;

                    $.ajax({
                        url: '/Transaction/SetDefaultAccount',
                        type: "POST",
                        data: { accountId },
                        success: response => {
                            $.notify(response, "success");
                            location.reload();
                        },
                        error: error => console.log(error)
                    });

                });

            //transfer to default account
            formTransferAmount.addEventListener("submit",
                function(evt) {
                    evt.preventDefault();

                    const accountId = this.AccountId.value;
                    if (!accountId) return;

                    const btn = this.btnTransfer;
                    disableBtn(btn, true);

                    const body = serializeForm(this);

                    $.ajax({
                        url: '/Transaction/TransferToDefaultAccount',
                        type: "POST",
                        data: body,
                        success: response => {
                            $.notify(response.Message, response.IsSuccess ? "success" : "error");

                            if (response.IsSuccess) {
                                location.reload();
                            }

                            disableBtn(btn, false);
                        },
                        error: error => {
                            disableBtn(btn, false);
                            console.log(error)
                        }
                    });

                });
        })();
    </script>
}

