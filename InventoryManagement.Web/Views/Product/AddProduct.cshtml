@using InventoryManagement.Repository
@model ProductShowViewModel
@{
    ViewData["Title"] = "Add Product Info";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}


<div class="m-md-3">
    <a href="/Product/CatalogList" class="blue-text">
        <i class="fas fa-long-arrow-alt-left"></i>
        Back to category
    </a>
    <h4 class="mb-3 page-header">Add Product Info</h4>

    <section class="card card-body">
        <form id="formProduct" asp-action="AddProduct">
            <div class="form-row">
                <div class="col-lg-3">
                    <div class="md-form">
                        <select name="ProductCatalogId" searchable="Search here.." id="ParentId" asp-items="ViewBag.ParentId" class="mdb-select" required>
                            <option disabled value="" selected>Select Category</option>
                        </select>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="md-form">
                        <input asp-for="ProductName" class="form-control" required/>
                        <label for="ProductName">Brand & Model</label>
                        <span asp-validation-for="ProductName"></span>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="md-form">
                        <input id="inputWarranty" name="Warranty" class="form-control" type="text"/>
                        <label for="inputWarranty">Warranty</label>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="md-form">
                        <input id="inputDescription" name="Description" class="form-control" type="text"/>
                        <label for="inputDescription">Description</label>
                    </div>
                </div>
            </div>
            <div class="text-right">
                <input type="submit" value="Add Product" class="btn btn-deep-orange btn-rounded"/>
            </div>
        </form>
    </section>

    <section class="card card-body mt-3">
        <h5 class="font-weight-bold mb-3" id="categoryName"></h5>
        <table id="data-table" class="table table-bordered table-sm">
            <thead>
            <tr>
                <th><strong>Brand & Model</strong></th>
                <th><strong>Stock</strong></th>
                <th><strong>Warranty</strong></th>
                <th><strong>Description</strong></th>
                <th style="width: 50px"><strong>Remove</strong></th>
            </tr>
            </thead>
        </table>
    </section>
</div>

@section Scripts{
    <script>
        // selectors
        const parentId = document.getElementById('ParentId');

        $(function() {
            // Material Select Initialization
            $('.mdb-select').materialSelect();

            if (parentId.selectedIndex > 0) {
                categoryBasedProduct(parentId.value);
            } else {
                dataTable.getData();
            }
        });

        const dataTable = {
            table: null,
            filter: null,
            init: function() {
                dataTable.table = $("#data-table").DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                        url: "/Product/GetProductByCategory",
                        type: "POST",
                        data: function(d) {
                            d.filters = dataTable.filter;
                        }
                    },
                    columns:
                    [
                        {
                            data: "ProductName",
                            "render": function (data, type, row, meta) {
                                return `<a id="${row.ProductId}" class="blue-text bill-details">${data}</a>`
                            }
                        },
                        {
                            data: "Stock",
                            "render": function(data, type, row, meta) {
                                return data > 0 ? `<a target="_blank" class="blue-text" href="/Product/StockDetails/${row.ProductId}">${data}</a>` : data;
                            }
                        },
                        { data: "Warranty" },
                        { data: "Description" },
                        { data: "ProductId", "render": function(data) { return `<a class="far fa-trash-alt red-text remove"  href="/Product/DeleteProduct/${data}"></a>`; } }
                    ],
                    columnDefs: [
                        { 'searchable': false, 'targets': [4] },
                        { 'sortable': false, 'targets': [4] },
                        { 'className': "text-left", "targets": [0, 2, 3] }
                    ]
                });
            },
            getData: function() {
                dataTable.table ? dataTable.table.ajax.reload() : dataTable.init();
            }
        }

        //delete click
        $('#data-table').on("click", ".remove", function(evt) {
                evt.preventDefault();

                var row = $(this).closest("tr");
                var btnDelete = $(this);
                const url = $(this).attr('href');

                $('#table-row em').remove();
                $('#table-row tr').removeClass("error-color");

                if (!url) return;

                if (confirm("Are you sure you want to delete?")) {
                    $.post(url,
                        function(response) {
                            if (response === -1) {
                                row.addClass("error-color").after('<em class="used-error">This data already used in others place</em>');
                                btnDelete.removeAttr("href");
                                return;
                            }
                            row.hide();
                        });
                }
            });

        //product details click
        $('#data-table').on("click", ".bill-details", function(evt) {
            $.ajax({
                url: '/Product/StockOutProductBill',
                type: "POST",
                data: { productId: this.id },
                success: function(response) {
                    if (response) {
                        const a = document.createElement('a');
                        a.target= '_blank';
                        a.href = `/Purchase/PurchaseReceipt/${response}`;
                        a.click();
                        return;
                    }

                    $.notify("Bill Not Found!", "error");
                },
                error: function(error) {
                    console.log(error);
                    btnSubmit.innerText = 'Update Bill';
                    btnSubmit.disabled = false;
                }
            });
        });

        // event change category
        parentId.addEventListener('change',
            function() {
                const categoryId = this.value;
                if (!categoryId) return;

                categoryBasedProduct(categoryId);
            });

        //show category based product
        function categoryBasedProduct(categoryId) {
            const categoryName = document.getElementById('categoryName');
            categoryName.textContent = parentId.options[parentId.selectedIndex].text;

            dataTable.filter = [{ Field: "ProductCatalogId", Value: categoryId, Operand: "==" }];
            dataTable.getData();
        }
    </script>
}
