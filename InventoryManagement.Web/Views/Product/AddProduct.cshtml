@using InventoryManagement.Repository
@model ProductShowViewModel
@{
    ViewData["Title"] = "Add Product Info";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@section styles{
   <style>
       .remove { cursor:pointer}
       .remove:hover { color:#ff0000}
   </style>
}

<div class="m-md-3">
    <h4 class="mb-3 page-header">Add Product Info</h4>

    <section class="card card-body">
        <form id="formProduct" asp-action="AddProduct">
            <div class="form-row">
                <div class="col-lg-3">
                    <div class="md-form">
                        <select name="ProductCatalogId" id="ParentId" asp-items="ViewBag.ParentId" class="mdb-select" required>
                            <option value="" selected>Select Category</option>
                        </select>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="md-form">
                        <input asp-for="ProductName" class="form-control" required />
                        <label for="ProductName">Product Name</label>
                        <span asp-validation-for="ProductName"></span>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="md-form">
                        <input id="inputWarranty" name="Warranty" class="form-control" type="text" />
                        <label for="inputWarranty">Warranty</label>
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="md-form">
                        <input id="inputDescription" name="Description" class="form-control" type="text" />
                        <label for="inputDescription">Description</label>
                    </div>
                </div>
            </div>
            <div class="text-right">
                <input type="submit" value="Add Product" class="btn btn-grey" />
            </div>
        </form>
    </section>

    <section class="card card-body mt-3">
        <h4 id="categoryName"></h4>
        <table class="data-table table table-bordered table-sm">
            <thead>
                <tr>
                    <th><strong>Product Name</strong></th>
                    <th><strong>Warranty</strong></th>
                    <th><strong>Description</strong></th>
                    <th><strong>Remove</strong></th>
                </tr>
            </thead>
            <tbody id="tbody"></tbody>
        </table>
    </section>
</div>

@section Scripts{
    <script>
        // Material Select Initialization
        $('.mdb-select').materialSelect();

        // selectors
        const parentId = document.getElementById('ParentId')
        const tbody = document.getElementById('tbody')

        // functions
        const getProductsInfo = function (categoryId = 0) {
            const url = '/Product/GetProductByCategory'
            const param = { params: { categoryId: categoryId } };

            axios.get(url, param)
                .then(res => {
                    let html = ''
                    res.data.forEach(item => {
                        html += `<tr>
                    <td class="text-left">${item.ProductName}</td>
                    <td>${item.Warranty}</td>
                    <td class="text-left">${item.Description}</td>
                    <td style="width:50px; text-align:center"><i class="fa fa-times remove" id="${item.ProductId}"></i></td>
                    </tr>`
                    })

                    tbody.innerHTML = ''
                    tbody.innerHTML = html
                })
                .catch(err => console.log(err))
        }

        //on change dropdown
        const onCategoryChanged = function () {
            let categoryId = +this.value
            if (!categoryId) return

            const categoryName = document.getElementById('categoryName')
            categoryName.textContent = this.options[this.selectedIndex].text;

            getProductsInfo(categoryId)
        }

        //remove
        const onRemoveClicked = function (e) {
            const clicked = e.target.classList.contains('remove')
            if (clicked) {
                const id = e.target.id
                const url = '/Product/DeleteProduct'
                const param = { params: { id } };

                axios.get(url, param)
                    .then(res => {
                        if (res.data !== -1) {
                            e.target.parentElement.parentElement.remove()
                        } else {
                            alert('this product already used!')
                        }
                    })
                    .catch(err => console.log(err))
            }
        }

        // call function
        getProductsInfo()

        // event
        parentId.addEventListener('change', onCategoryChanged)
        tbody.addEventListener('click', onRemoveClicked)
    </script>
}
